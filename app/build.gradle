plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

apply plugin: 'realm-android'

kotlin {
    jvmToolchain(17)
}

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        return ""
    }
    return p.text.trim()
}

kapt {
    correctErrorTypes = true
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
        arg("room.incremental", "true")
        arg("room.expandProjection", "true")
    }
}

android {
    def packageName = "eu.darken.bluemusic"

    signingConfigs {
        release {}
    }
    Properties signingProps = new Properties()
    def signingPropFile = new File(System.properties['user.home'], ".appconfig/${packageName}/signing.properties")
    if (signingPropFile.canRead()) signingProps.load(new FileInputStream(signingPropFile))

    String keyStorePath = System.getenv("STORE_PATH") ?: signingProps["release.storePath"]
    File keyStore = keyStorePath ? new File(keyStorePath) : null
    if (keyStore?.canRead()) {
        signingConfigs {
            release {
                storeFile keyStore
                storePassword System.getenv("STORE_PASSWORD") ?: signingProps['release.storePassword']
                keyAlias System.getenv("KEY_ALIAS") ?: signingProps['release.keyAlias']
                keyPassword System.getenv("KEY_PASSWORD") ?: signingProps['release.keyPassword']
            }
        }
    }

    compileSdkVersion buildConfig.compileSdk

    def versionProperties = new Properties()
    versionProperties.load(new FileInputStream(new File("version.properties")))

    def major = versionProperties.getProperty("project.versioning.major").toInteger()
    def minor = versionProperties.getProperty("project.versioning.minor").toInteger()
    def patch = versionProperties.getProperty("project.versioning.patch").toInteger()
    def build = versionProperties.getProperty("project.versioning.build").toInteger()

    def name = "${major}.${minor}.${patch}-rc${build}"
    def code = major * 10000000 + minor * 100000 + patch * 1000 + build * 10

    defaultConfig {
        applicationId "${packageName}"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode code
        versionName name
    }
    buildTypes {
        def proguardRulesRelease = fileTree(dir: "proguard", include: ["*.pro"]).asList().toArray()
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles proguardRulesRelease
            proguardFiles 'proguard-rules-debug.pro'
            //debuggable false
        }
        beta {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles proguardRulesRelease
            testProguardFiles getDefaultProguardFile('proguard-android.txt')
            testProguardFiles proguardRulesRelease
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles proguardRulesRelease
            testProguardFiles getDefaultProguardFile('proguard-android.txt')
            testProguardFiles proguardRulesRelease
        }
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.outputs.each { output ->
                    output.outputFileName = applicationId + "-v" + defaultConfig.versionName + "(" + defaultConfig.versionCode + ")-" + variant.buildType.name.toUpperCase() + "-" + gitSha() + ".apk"
                }
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
            "-Xjvm-default=all"
        ]
    }
    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"
    }
    namespace 'eu.darken.bluemusic'
    lint {
        abortOnError false
        ignore 'CheckResult'
    }
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}


dependencies {
    // Support libs
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "com.google.android.material:material:1.4.0"
    implementation "androidx.legacy:legacy-preference-v14:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    implementation "androidx.lifecycle:lifecycle-common:2.3.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation("androidx.core:core-ktx:1.16.0")
    implementation("androidx.appcompat:appcompat:1.7.0")
    implementation("androidx.annotation:annotation:1.4.0")

    implementation("androidx.preference:preference-ktx:1.2.0")
    implementation("androidx.datastore:datastore-preferences:1.0.0")

    // Compose
    implementation platform('androidx.compose:compose-bom:2024.06.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.activity:activity-compose:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.2'
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    implementation 'androidx.compose.runtime:runtime-livedata'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // Room
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"

    // RX
    implementation "io.reactivex.rxjava3:rxjava:3.1.1"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation 'com.jakewharton.rx3:replaying-share:3.0.0'
    implementation "com.jakewharton.rx3:replaying-share-kotlin:3.0.0"

    //Dagger
    implementation "com.google.dagger:dagger:${buildConfig.deps.dagger}"
    kapt "com.google.dagger:dagger-compiler:${buildConfig.deps.dagger}"
    implementation "com.google.dagger:dagger-android:${buildConfig.deps.dagger}"
    implementation "com.google.dagger:dagger-android-support:${buildConfig.deps.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${buildConfig.deps.dagger}"

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:1.8.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.1")

    //Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // jUnit
    testImplementation 'junit:junit:4.13.2'

    // IAP
    implementation 'com.android.billingclient:billing:7.1.1'
}